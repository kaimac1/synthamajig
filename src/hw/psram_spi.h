/******************************************************************************

rp2040-psram

Copyright © 2023 Ian Scott

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************/

/**
 * @file psram_spi.h
 *
 * \mainpage
 *
 * The interface to this file is defined in psram_spi.h. Please see the
 * documentation for this file.
 *
 * The following defines _MUST_ be defined:
 *
 * - @c PSRAM_PIN_CS - GPIO number of the chip select pin
 * - @c PSRAM_PIN_SCK - GPIO number of the clock pin
 * - @c PSRAM_PIN_MOSI - GPIO number of the MOSI pin
 * - @c PSRAM_PIN_MISO - GPIO number of the MISO pin
 *
 * Optional define:
 * - @c PSRAM_MUTEX - Define this to put PSRAM access behind a mutex. This must
 * be used if the PSRAM is to be used by multiple cores.
 *
 * Project homepage: https://github.com/polpo/rp2040-psram
 */

#pragma once

#include "pinmap.h"

#include "hardware/pio.h"
#include "hardware/gpio.h"
#include "hardware/timer.h"
#include "hardware/dma.h"
#include "hardware/sync.h"
#include "pico/mutex.h"
#include <string.h>

#include "psram_spi.pio.h"
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

#define PSRAM_DEVICE_SIZE   (8*1024*1024)
#define PSRAM_SM0   0
#define PSRAM_SM1   1
#define PSRAM_CLKDIV 1.0f

/**
 * @brief A struct that holds the configuration for the PSRAM interface.
 *
 * This struct is generated by psram_spi_init() and must be passed to all calls to
 * the psram access functions.
 */
typedef struct psram_spi_inst {
#if defined(PSRAM_MUTEX)
#elif defined(PSRAM_SPINLOCK)
    spin_lock_t* spinlock;
    uint32_t spin_irq_state;
#endif
    mutex_t mtx;
    int write_dma_chan;
    dma_channel_config write_dma_chan_config;
    int read_dma_chan;
    dma_channel_config read_dma_chan_config;
#if defined(PSRAM_ASYNC)
    int async_dma_chan;
    dma_channel_config async_dma_chan_config;
#endif
} psram_spi_inst_t;
extern psram_spi_inst_t psram;

#if defined(PSRAM_ASYNC)
extern psram_spi_inst_t* async_spi_inst;
#endif


// For initialising the device over standard (mosi/miso) SPI
__force_inline static void __time_critical_func(pio_spi_single_rw)(
        const uint8_t* src, const size_t src_len,
        uint8_t* dst, const size_t dst_len
) {
    size_t tx_remain = src_len, rx_remain = dst_len;

#if defined(PSRAM_MUTEX)
    mutex_enter_blocking(&psram.mtx); 
#elif defined(PSRAM_SPINLOCK)
    psram.spin_irq_state = spin_lock_blocking(psram.spinlock);
#endif

    io_rw_8 *txfifo = (io_rw_8 *) &PSRAM_PIO->txf[PSRAM_SM0];
    while (tx_remain) {
        if (!pio_sm_is_tx_fifo_full(PSRAM_PIO, PSRAM_SM0)) {
            *txfifo = *src++;
            --tx_remain;
        }
    }

    io_rw_8 *rxfifo = (io_rw_8 *) &PSRAM_PIO->rxf[PSRAM_SM0];
    while (rx_remain) {
        if (!pio_sm_is_rx_fifo_empty(PSRAM_PIO, PSRAM_SM0)) {
            *dst++ = *rxfifo;
            --rx_remain;
        }
    }

#if defined(PSRAM_MUTEX)
    mutex_exit(&psram.mtx);
#elif defined(PSRAM_SPINLOCK)
    spin_unlock(psram.spinlock, psram.spin_irq_state);
#endif
}

/**
 * @brief Write raw data to the PSRAM SPI PIO, driven by DMA without CPU
 * involvement. 
 *
 * It's recommended to use DMA when possible as it's higher speed. Used to send
 * raw commands to the PSRAM. This function is faster than
 * pio_spi_write_read_dma_blocking() if no data is to be read.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 */
__force_inline static void __time_critical_func(pio_spi_write_dma_blocking)(
        psram_spi_inst_t* spi,
        const uint32_t* src, const size_t src_words
) {
#ifdef PSRAM_MUTEX
    mutex_enter_blocking(&spi->mtx); 
#elif defined(PSRAM_SPINLOCK)
    spi->spin_irq_state = spin_lock_blocking(spi->spinlock);
#endif // PSRAM_SPINLOCK
#if defined(PSRAM_WAITDMA)
#if defined(PSRAM_ASYNC)
    dma_channel_wait_for_finish_blocking(spi->async_dma_chan);
#endif // PSRAM_ASYNC
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
#endif // PSRAM_WAITDMA
    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, src, src_words);
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
#ifdef PSRAM_MUTEX
    mutex_exit(&spi->mtx);
#elif defined(PSRAM_SPINLOCK)
    spin_unlock(spi->spinlock, spi->spin_irq_state);
#endif // PSRAM_SPINLOCK
}

/**
 * @brief Write and read raw data to the PSRAM SPI PIO, driven by DMA without CPU
 * involvement. 
 *
 * It's recommended to use DMA when possible as it's higher speed. Used to send
 * raw commands and receive data from the PSRAM. Usually the @c psram_write* and
 * @c psram_read* commands should be used instead.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 * @param dst Pointer to the destination for read data, if any. Set to 0 or NULL
 * if no data is to be read.
 * @param dst_words Length of destination in 32-bit words
 */
__force_inline static void __time_critical_func(pio_qspi_read_write_dma)(
        psram_spi_inst_t* spi,
        const uint32_t* src, const size_t src_words,
        uint32_t* dst, const size_t dst_words
) {
#ifdef PSRAM_MUTEX
    mutex_enter_blocking(&spi->mtx); 
#elif defined(PSRAM_SPINLOCK)
    spi->spin_irq_state = spin_lock_blocking(spi->spinlock);
#endif // PSRAM_SPINLOCK
#if defined(PSRAM_WAITDMA)
#if defined(PSRAM_ASYNC)
    dma_channel_wait_for_finish_blocking(spi->async_dma_chan);
#endif // PSRAM_ASYNC
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
#endif // PSRAM_WAITDMA
    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, src, src_words);
    dma_channel_transfer_to_buffer_now(spi->read_dma_chan, dst, dst_words);
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
#ifdef PSRAM_MUTEX
    mutex_exit(&spi->mtx);
#elif defined(PSRAM_SPINLOCK)
    spin_unlock(spi->spinlock, spi->spin_irq_state);
#endif // PSRAM_SPINLOCK
}

/**
 * @brief Write raw data asynchronously to the PSRAM SPI PIO, driven by DMA without CPU
 * involvement. 
 *
 * Used to send raw commands to the PSRAM. Usually the @c psram_write*_async()
 * command should be used instead.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 */
#if defined(PSRAM_ASYNC)
__force_inline static void __time_critical_func(pio_spi_write_async)(
        psram_spi_inst_t* spi,
        const uint8_t* src, const size_t src_len
) {
#if defined(PSRAM_ASYNC_SYNCHRONIZE)
#ifdef PSRAM_MUTEX
    mutex_enter_blocking(&spi->mtx); 
#elif defined(PSRAM_SPINLOCK)
    spi->spin_irq_state = spin_lock_blocking(spi->spinlock);
#endif // PSRAM_SPINLOCK
#endif // defined(PSRAM_ASYNC_SYNCHRONIZE)
    // Wait for all DMA to PSRAM to complete
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->async_dma_chan);
    async_spi_inst = spi;

    dma_channel_transfer_from_buffer_now(spi->async_dma_chan, src, src_len);
}
#endif

int psram_spi_init(void);
void psram_spi_uninit(psram_spi_inst_t spi);
void psram_test(psram_spi_inst_t *psram);


/******************************************************************************/
// Write

// Write single 32-bit value
__force_inline static void psram_write32(uint32_t addr, uint32_t val) {
    uint32_t setup = 0x000F0000;
    uint32_t cmd = 0x02000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    pio_sm_put(PSRAM_PIO, sm, __builtin_bswap32(val));
    int timeout = 10000;
    while(!pio_sm_is_tx_fifo_empty(PSRAM_PIO, sm) && timeout) timeout--;
    if (timeout == 0) {
        printf("psram timeout! addr %08x\n", addr);
    }
    restore_interrupts(irq);
};

__force_inline static void psram_writewords(uint32_t addr, uint32_t *buffer, uint32_t num_words) {
    uint32_t setup = (7 + 8*num_words) << 16;
    uint32_t cmd = 0x02000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    while (num_words) {
        pio_sm_put(PSRAM_PIO, sm, __builtin_bswap32(*buffer++));
        num_words--;
        while(!pio_sm_is_tx_fifo_empty(PSRAM_PIO, sm));
    }
    restore_interrupts(irq);
}

__force_inline static void psram_writebuf(uint32_t addr, uint8_t *buffer, size_t bytes) {
    uint32_t setup = (7 + 2*bytes) << 16;
    uint32_t cmd = 0x02000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    int num_bytes = bytes;
    while (num_bytes > 0) {
        pio_sm_put(PSRAM_PIO, sm, __builtin_bswap32(*(uint32_t*)buffer));
        num_bytes -= 4;
        buffer += 4;
        while(!pio_sm_is_tx_fifo_empty(PSRAM_PIO, sm));
    }
    restore_interrupts(irq);
}



/******************************************************************************/
// Read

// Read single 32-bit value
__force_inline static uint32_t psram_read32(uint32_t addr) {
    uint32_t setup = 0x00070008;
    uint32_t cmd = 0xeb000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    uint32_t val = pio_sm_get_blocking(PSRAM_PIO, sm);
    restore_interrupts(irq);

    return __builtin_bswap32(val);
};

// Read single 8-bit value
__force_inline static uint8_t psram_read8(uint32_t addr) {
    // We can't actually read less than 32 bits at a time, so do that
    return psram_read32(addr) >> 24;
};

// Read a number of 32-bit words into a buffer
// The address range must not cross the 8MB boundary as this only reads from one device!
__force_inline static void psram_readwords(uint32_t addr, uint32_t *buffer, uint32_t num_words) {
    uint32_t setup = 0x00070000 | (8*num_words);
    uint32_t cmd = 0xeb000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    while (num_words) {
        *buffer++ = __builtin_bswap32(pio_sm_get_blocking(PSRAM_PIO, sm));
        num_words--;
    }
    restore_interrupts(irq);
};

__force_inline static void psram_readbuf(uint32_t addr, uint8_t *buffer, size_t bytes) {
    const size_t words = (bytes + 3)/4;
    uint32_t setup = 0x00070000 | (8*words);
    uint32_t cmd = 0xeb000000 | addr;
    int sm = (addr >= PSRAM_DEVICE_SIZE) ? PSRAM_SM1 : PSRAM_SM0;

    uint32_t irq = save_and_disable_interrupts();
    pio_sm_put(PSRAM_PIO, sm, setup);
    pio_sm_put(PSRAM_PIO, sm, cmd);
    int num_bytes = bytes;
    while (num_bytes > 0) {
        uint32_t data32 = __builtin_bswap32(pio_sm_get_blocking(PSRAM_PIO, sm));
        memcpy(buffer, &data32, num_bytes >= 4 ? 4 : num_bytes);
        buffer += 4;
        num_bytes -= 4;
    }
    restore_interrupts(irq);
};























/**
 * @brief Write 32 bits of data to a given address asynchronously to the PSRAM
 * SPI PIO, driven by DMA without CPU involvement.
 *
 * This function is optimized to write 32 bits as quickly as possible to the
 * PSRAM as opposed to the more general-purpose psram_write() function.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param val Value to write.
 */
#if defined(PSRAM_ASYNC)
__force_inline static void psram_write32_async(psram_spi_inst_t* spi, uint32_t addr, uint32_t val) {
    // Break the address into three bytes and send read command
    write32_command[3] = addr >> 16;
    write32_command[4] = addr >> 8;
    write32_command[5] = addr;
    write32_command[6] = val;
    write32_command[7] = val >> 8;
    write32_command[8] = val >> 16;
    write32_command[9] = val >> 24;

    pio_spi_write_async(spi, write32_command, sizeof(write32_command));
};
#endif


static uint8_t write_command[] = {
    0,          // n bits write
    0,          // 0 bits read
    0x02u,      // Fast write command
    0, 0, 0     // Address
};
/**
 * @brief Write @c count bytes of data to a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the write is
 * complete.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param src Pointer to the source data to write.
 * @param count Number of bytes to write.
 */
__force_inline static void psram_write(psram_spi_inst_t* spi, const uint32_t addr, const uint8_t* src, const size_t count) {
    // Break the address into three bytes and send read command
    write_command[0] = (4 + count) * 8;
    write_command[3] = addr >> 16;
    write_command[4] = addr >> 8;
    write_command[5] = addr;

    //pio_spi_write_dma_blocking(spi, write_command, sizeof(write_command));
    //pio_spi_write_dma_blocking(spi, src, count);
};


static uint8_t read_command[] = {
    40,         // 40 bits write
    0,          // n bits read
    0x0bu,      // Fast read command
    0, 0, 0,    // Address
    0           // 8 delay cycles
};
/**
 * @brief Read @c count bits of data from a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the read is
 * complete.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to read from.
 * @param dst Pointer to the destination for the read data.
 * @param count Number of bytes to read.
 */
__force_inline static void psram_read(psram_spi_inst_t* spi, const uint32_t addr, uint8_t* dst, const size_t count) {
    read_command[1] = count * 8;
    read_command[3] = addr >> 16;
    read_command[4] = addr >> 8;
    read_command[5] = addr;

    //pio_qspi_read_write_dma(spi, read_command, sizeof(read_command), dst, count);
};


static uint8_t write_async_fast_command[134] = {
    0,          // n bits write
    0,          // 0 bits read
    0x02u      // Fast write command
};
/**
 * @brief Write @c count bytes of data to a given address asynchronously to the
 * PSRAM SPI PIO, driven by DMA without CPU involvement. 
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param src Pointer to the source data to write.
 * @param count Number of bytes to write.
 */
#if defined(PSRAM_ASYNC)
__force_inline static void psram_write_async_fast(psram_spi_inst_t* spi, uint32_t addr, uint8_t* val, const size_t count) {
    write_async_fast_command[0] = (4 + count) * 8;
    write_async_fast_command[3] = addr >> 16;
    write_async_fast_command[4] = addr >> 8;
    write_async_fast_command[5] = addr;

    memcpy(write_async_fast_command + 6, val, count);

    pio_spi_write_async(spi, write_async_fast_command, 6 + count);
};
#endif


#ifdef __cplusplus
}
#endif
