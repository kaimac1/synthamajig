from PIL import ImageFont, ImageDraw, Image
import math

FONT_NAME = 'palmbold'
FONT_FILE = 'palm-os-bold.ttf'
FONT_SIZE = 16
BITMAP_HEIGHT = 9
Y_OFFSET = -2
# FONT_NAME = 'minipixel'
# FONT_FILE = 'minipixel7.ttf'
# FONT_SIZE = 20
# BITMAP_HEIGHT = 12
# Y_OFFSET = -4



START_CHAR = 32
NUM_CHARS = 95



def get_char_data(char):
    imgfont = ImageFont.truetype(FONT_FILE, FONT_SIZE)
    
    # First get the char width
    dummy_img = Image.new(mode='1', size=(128,128), color=0)
    draw = ImageDraw.Draw(dummy_img)
    char_width = draw.textlength(char, imgfont)
    if char_width != int(char_width):
        print("Warning: char_width is not an integer")
    char_width = int(char_width) - 1 # remove space

    # Then create an image of the correct size
    image = Image.new(mode='1', size=(char_width, BITMAP_HEIGHT), color=0)
    draw = ImageDraw.Draw(image)
    draw.text((0, Y_OFFSET), char, font=imgfont, fill=255)

    pixels = list(image.getdata())
    data = []

    bytes_per_col = math.ceil(BITMAP_HEIGHT / 8)
    for col_byte in range(bytes_per_col):
        for x in range(char_width):
            byteout = 0
            for by in range(8):
                y = 8*col_byte + by
                if y >= BITMAP_HEIGHT:
                    pixel = 0
                else:
                    idx = y*char_width + x
                    pixel = 1 if pixels[idx] else 0
                byteout >>= 1
                byteout |= (pixel << 7)
            data.append(byteout)
    return data, char_width



out = ''

index = []
data = []
widths = []
pos = 0

for code in range(START_CHAR, START_CHAR+NUM_CHARS):
    index.append(pos)
    char = chr(code)
    chardata, charwidth = get_char_data(char)
    pos += len(chardata)
    data.extend(chardata)
    widths.append(charwidth)



OUTPUT_C_FILE = 'font.h'
BYTES_PER_ROW = 16
cfile = open(OUTPUT_C_FILE, 'w')
cfile.write('// Autogenerated file\n')

data_name = f"font_{FONT_NAME}_data"
cfile.write(f'\nconst uint8_t {data_name}[{len(data)}] = {{\n')
for n,byte in enumerate(data):
    cfile.write(f"0x{byte:02x},")
    if n%BYTES_PER_ROW == BYTES_PER_ROW-1:
        cfile.write('\n')
cfile.write(f'}};\n')

index_name = f"font_{FONT_NAME}_index"
cfile.write(f'\nconst uint16_t {index_name}[{len(index)}] = {{\n')
for n,val in enumerate(index):
    cfile.write(f"0x{val:02x},")
    if n%BYTES_PER_ROW == BYTES_PER_ROW-1:
        cfile.write('\n')
cfile.write(f'}};\n')

widths_name = f"font_{FONT_NAME}_widths"
cfile.write(f'\nconst uint8_t {widths_name}[{len(widths)}] = {{\n')
for n,val in enumerate(widths):
    cfile.write(f"0x{val:02x},")
    if n%BYTES_PER_ROW == BYTES_PER_ROW-1:
        cfile.write('\n')
cfile.write(f'}};\n')